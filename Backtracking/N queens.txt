public class Solution {
    public ArrayList<ArrayList<String>> solveNQueens(int n) {
        ArrayList<ArrayList<String>> ans= new ArrayList();
        int[][] board = new int[n][n];
        solveNQueens(ans,0,n,board);
        return ans;
    }
    private void solveNQueens(ArrayList<ArrayList<String>> ans,int row,int n,int[][] board){
        if(row==n){
            addToResult(ans,board);
            return;
        }
        for(int col=0;col<n;col++){
            if(isValid(row,col,board)){
                board[row][col]=1;
                solveNQueens(ans,row+1,n,board);
                board[row][col]=0;
            }
        }
    }
    private boolean isValid(int row ,int col,int[][] board ){
        for(int i=row-1,j=col;i>=0;i--){
            if(board[i][j]==1) return false;
        }
        for(int i=row-1,j=col-1;i>=0&&j>=0;i--,j--){
            if(board[i][j]==1) return false;
        }
        for(int i=row-1,j=col+1;i>=0&&j<board.length;i--,j++){
            if(board[i][j]==1) return false;
        }
        return true;
    }
    private void addToResult( ArrayList<ArrayList<String>> ans,int[][] board){
        ArrayList<String> list = new ArrayList();
        for(int i=0;i<board.length;i++){
            StringBuilder temp = new StringBuilder("");
            for(int j=0;j<board.length;j++){
                if(board[i][j]==1) temp.append('Q');
                else temp.append('.');
            }
            list.add(temp.toString());
        }
        ans.add(list);
    }
}